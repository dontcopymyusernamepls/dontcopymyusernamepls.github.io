/*eslint-disable */
var NativeAppLauncher = (function(o) {
  "use strict";
  var u = {},
    p = {
      getAppUri: function() {
        return "#";
      },
      getAppLauncherEl: function() {
        if (!u.appLauncherElId)
          throw new Error("Settings does not have valid appLauncherElId");
        return o("#" + u.appLauncherElId);
      },
      getNotSupportedMessage: function() {
        if (!u.appLauncherElId)
          throw new Error("Settings does not have valid NotSupportedMessage");
        return u.notSupportedMessage;
      },
      getCampaignValue: function() {
        return u.campaignCode;
      },
      getAppStoreURI: function() {
        return "#";
      },
    },
    s = o.extend({}, p, {
      getIntentURI: function() {
        var n = u.universalLinkUrl.substring(
            u.universalLinkUrl.indexOf("https://") + 8,
            u.universalLinkUrl.length
          ),
          e = u.universalLinkUrl.substring(
            0,
            u.universalLinkUrl.indexOf("qrlogin") + 7
          );
        return (
          "intent://" +
          n +
          "#Intent;scheme=" +
          u.appUri +
          ";package=" +
          u.androidAppId +
          ";S.browser_fallback_url=" +
          e +
          ";end"
        );
      },
      getAppUri: function() {
        return u.appUri;
      },
      getAppStoreURI: function() {
        var n = this.getCampaignValue()
          ? "&referrer=utm_source%3Dother%26utm_campaign%3D" +
            this.getCampaignValue()
          : "";
        return (
          "https://play.google.com/store/apps/details?id=" + u.androidAppId + n
        );
      },
      getUniversalLinkingUrl: function() {
        return u.universalLinkUrl;
      },
    }),
    l = o.extend({}, p, {
      getIntentURI: function() {
        var n = u.universalLinkUrl.substring(
            u.universalLinkUrl.indexOf("https://") + 8,
            u.universalLinkUrl.length
          ),
          e = u.universalLinkUrl.substring(
            0,
            u.universalLinkUrl.indexOf("qrlogin") + 7
          );
        return (
          "intent://" +
          n +
          "#Intent;scheme=" +
          u.appDeepUri +
          ";package=" +
          u.androidAppId +
          ";S.browser_fallback_url=" +
          e +
          ";end"
        );
      },
      getAppUri: function() {
        return u.appUri;
      },
      getAppStoreURI: function() {
        var n = this.getCampaignValue()
          ? "&referrer=utm_source%3Dother%26utm_campaign%3D" +
            this.getCampaignValue()
          : "";
        return (
          "https://play.google.com/store/apps/details?id=" + u.androidAppId + n
        );
      },
      getUniversalLinkingUrl: function() {
        return u.universalLinkUrl;
      },
    }),
    c = o.extend({}, p, {
      getAppStoreURI: function() {
        return this.getCampaignValue()
          ? n.appendQueryParameter(u.iOsAppStore, "ct", this.getCampaignValue())
          : u.iOsAppStore;
      },
      getUniversalLinkingUrl: function() {
        return u.universalLinkUrl;
      },
      getAppUri: function() {
        if (!u.appUri) throw new Error("Settings does not have valid AppURI");
        return u.appUri;
      },
    }),
    d = function(n) {
      (this.strategyParameters = n), (this.init = function() {});
    },
    g = function(t) {
      this.init = function() {
        var n = t.getAppLauncherEl(),
          e = t.getAppUri();
        n.click(function(n) {
          n.preventDefault(), window.location.reload();
        }),
          (window.location = e);
      };
    },
    f = function(n) {
      d.call(this, n);
      var e = ["pagehide", "blur", "beforeunload"],
        t = null,
        r = function() {
          clearTimeout(t), (t = null), o(window).unbind(e.join(" "));
        },
        i = n.getAppLauncherEl();
      this.init = function() {
        a(),
          i.unbind("click").on("click", function(n) {
            n.preventDefault(), a();
          });
      };
      var a = function() {
        (window.location = n.getAppUri()), o(window).bind(e.join(" "), r);
      };
    },
    h = function(t) {
      d.call(this, t),
        (this.init = function() {
          var e = new f(t),
            n = t.getAppLauncherEl().attr("id");
          o("body").on("click", "#" + n, function(n) {
            n.preventDefault(), e.init();
          });
        });
    },
    v = function(e) {
      d.call(this, e),
        (this.init = function() {
          var n = e.getAppLauncherEl();
          n.attr("id");
          n.attr("href", e.getIntentURI());
        });
    },
    U = function(t) {
      d.call(this, t),
        (this.init = function() {
          var n = t.getAppLauncherEl().attr("id");
          o("body").on("click", "#" + n, function(n) {
            n.preventDefault();
            var e = t.getNotSupportedMessage()
              ? t.getNotSupportedMessage()
              : "Not Supported";
            alert(e);
          });
        });
    },
    w = function(t) {
      function r(n, e, t) {
        var r = new Date();
        r.setTime(r.getTime() + 1e3 * t);
        var i = "; expires=" + r.toGMTString();
        document.cookie = n + "=" + e + i + "; path=/";
      }
      d.call(this, t),
        (this.init = function() {
          t.getUniversalLinkingUrl() ||
            console.log(
              "Error: Universal Linking: Invalid url provided: " +
                t.getUniversalLinkingUrl()
            );
          var n = t.getAppLauncherEl();
          r(name, "", -1);
          var e = t.getUniversalLinkingUrl();
          n.attr("href", e);
        });
    },
    t = function(n) {
      var e,
        t,
        r,
        i,
        a =
          ((t = p),
          (r = m()).isIOS
            ? ((e = "ios"), (t = c))
            : r.isAndroid
            ? ((e = "android"), (t = 6 <= r.androidVersion ? s : l))
            : ((e = "desktop or default"),
              (t = p),
              o("#" + u.appLauncherElId).css("pointer-events", "none")),
          u.debug && t && k("AppLaunchParameter", e),
          t);
      if ("cta" == n || null == n) i = new h(a);
      else if ("direct" == n) i = new f(a);
      else if ("ul" == n) i = new w(a);
      else if ("notsupported" == n) i = new U(a);
      else if ("directapponly" == n) i = new g(a);
      else {
        if ("intent_cta" != n)
          throw new Error("Deeplinking: Unsupported deeplinking strategy type");
        i = new v(a);
      }
      return (
        u.debug &&
          i &&
          (k("AppLaunchStrategyType", n),
          (document.getElementById("print").innerHTML = n)),
        i
      );
    },
    m = function() {
      var n,
        e = window.navigator.userAgent.toLowerCase(),
        t = function() {
          return /(?:i(?:phone|p(?:o|a)d))/.test(e);
        },
        r = function() {
          return !!e.match(/FBAV/i);
        },
        i = function() {
          return -1 < e.indexOf("chrome");
        },
        a = function() {
          var n = e.match(/chrom(e|ium)\/([0-9]+)\./);
          return !!n && parseInt(n[2], 10);
        },
        o = function() {
          return -1 < e.indexOf("android");
        },
        u = function() {
          return -1 < e.indexOf("version");
        },
        p = function() {
          var n = e.match(/AppleWebKit\/([\d.]+)/);
          return !!n && parseFloat(n[1]);
        };
      return {
        isIOS: t(),
        iOSVersion: !!t() && parseInt(e.match(/os\s+(\d+)_/)[1], 10),
        isAndroid: o(),
        androidVersion:
          ((n = e.match(/android\s([0-9\.]*)/)), !!n && parseFloat(n[1])),
        isAndroidStockBrowser: o() && i() && u() && !r(),
        isAndroidNativeBrowser:
          !r() && ((o() && p() && p() < 537) || (a() && a() < 37)),
        isFacebook: r(),
        isChrome: i(),
        isTwitter: -1 < e.indexOf("twitter"),
        isFirefox: -1 < e.indexOf("firefox"),
      };
    };
  function k(n, e) {
    console.log(n + ":" + JSON.stringify(e, null, 4));
  }
  var n = {
    getQueryString: function(n) {
      null == n && (n = window.location.search), (n = n.split("+").join(" "));
      for (var e, t = {}, r = /[?&]?([^=]+)=([^&]*)/g; (e = r.exec(n)); )
        t[decodeURIComponent(e[1])] = decodeURIComponent(e[2]);
      return t;
    },
    appendQueryParameter: function(n, e, t) {
      var r = new RegExp("([?&])" + e + "=.*?(&|$)", "i"),
        i = -1 !== n.indexOf("?") ? "&" : "?";
      return n.match(r)
        ? n.replace(r, "$1" + e + "=" + t + "$2")
        : n + i + e + "=" + t;
    },
  };
  return {
    init: function(n) {
      (u = n),
        setTimeout(function() {
          return ((n = m()),
          (e = new t("cta")),
          n.isIOS
            ? (e = new t("ul"))
            : n.isAndroid &&
              (e =
                n.isChrome ||
                n.isAndroidNativeBrowser ||
                n.isAndroidStockBrowser ||
                n.isFirefox
                  ? new t("intent_cta")
                  : new t("ul")),
          1 == u.debug && k("browser", n),
          e).init();
          var n, e;
        }, 1e3);
    },
    browserChecker: m,
    util: n,
    androidParameters: s,
    iOSParameters: c,
  };
})(jQuery);
